{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","todo","setTodo","todos","setTodos","openUpdateTodo","setOpenUpdateTodo","textUpdate","setTextUpdate","input","setInput","selectionModel","setSelectionModel","rows","handleOnclick","e","preventDefault","alert","newTodo","completed","axios","post","console","log","updateSomething","id","put","columns","field","headerName","width","flex","renderCell","cellValues","todoId","row","_id","Button","variant","color","onClick","window","confirm","delete","useEffect","fetch","then","res","json","jsonRes","catch","err","style","height","CssBaseline","AppBar","position","Toolbar","Typography","align","paddingTop","textAlign","length","display","justifyContent","padding","onSubmit","TextField","type","onChange","target","name","value","previous","placeholder","label","size","marginLeft","marginRight","getRowId","pageSize","rowsPerPageOptions","disableSelectionOnClick","onSelectionModelChange","newSelectionModel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.108b362a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport { Typography, AppBar, CssBaseline, Toolbar, TextField } from '@mui/material';\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\nimport { DataGrid } from '@mui/x-data-grid';\nimport axios from 'axios';\n\nconst App = () => {\n  const [todo, setTodo] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [openUpdateTodo, setOpenUpdateTodo] = useState(false);\n  const [textUpdate, setTextUpdate] = useState();\n  const [input, setInput] = useState('');\n  const [selectionModel, setSelectionModel] = useState([])\n\n  const rows = todos;\n\n  const handleOnchange = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const handleOnchangeUpdate = (e) => {\n    const {name, value} = e.target\n    setInput((previous)=> ({...previous, [name]: value}));\n  }\n\n  const handleOnclick = (e) => {\n    e.preventDefault();\n    if (todo === '') {\n      alert('you have to add something ....!');\n    } else {\n      const newTodo = {\n        // id: Math.floor(Math.random() * 1000),\n        todo: todo,\n        completed: false\n      }\n      // setTodos((previous) => ([...previous, newTodo]))\n      axios.post('https://todo-list-backend-4bg9.onrender.com/newtodo', newTodo)\n      console.log(newTodo);\n      setTodo('');\n    }\n  };\n\n  const updateSomething = (id) => {\n    axios.put(\"https://todo-list-backend-4bg9.onrender.com/update/\" + id, input)\n    setOpenUpdateTodo(false)\n  }\n\n  const columns = [\n    { field: '_id', headerName: 'ID', width: 70, flex:0.5 },\n    { field: 'todo', headerName: 'To Do', width: 300, flex: 2 },\n    {\n      field: \"Action\",\n      width: 200,\n      renderCell: (cellValues) => {\n        // console.log(\"hi\", cellValues.row.todo);\n        // console.log(cellValues.row._id)\n        const todoId = cellValues.row._id\n        const handleDelete = () => {\n          if(window.confirm(\"Do you want to delete this todo?\")) {\n            axios.delete('https://todo-list-backend-4bg9.onrender.com/delete/' + todoId)\n          }\n        };\n\n        const handleEdit = () => {\n          setOpenUpdateTodo(true);\n          setTextUpdate(cellValues.row)\n          setInput(cellValues.row);\n        }\n        return (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleDelete}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleEdit}\n            >\n              Edit\n            </Button>\n          </>\n        );\n      }, flex: 1\n    }\n  ];\n\n  useEffect(() => {\n    fetch('https://todo-list-backend-4bg9.onrender.com/')\n    .then((res) => {\n      return res.json()\n    })\n    .then ((jsonRes) => setTodos(jsonRes))\n    .catch((err) => console.log(err))\n    // console.log(todos)\n   },[todos]);\n\n\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <BorderColorIcon color=\"error\" />\n          <Typography variant=\"h5\" align=\"right\">\n            Welcome to my to do list react app!\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Typography style={{paddingTop: '10px',textAlign: 'center'}} variant=\"h2\">My todo list ({todos.length})</Typography>\n      {!openUpdateTodo ? (<form style={{ display: 'flex', justifyContent: 'center', padding: '20px 0px 20px 0px' }} onSubmit={handleOnclick}>\n        <TextField\n          label=\"What do you want to do?\"\n          size=\"small\"\n          variant=\"filled\" type=\"text\"\n          onChange={handleOnchange}\n          value={todo}\n        />\n        <Button size=\"large\" onClick={handleOnclick} variant=\"contained\">Add to do</Button>\n      </form>) : (<form style={{ display: 'flex', justifyContent: 'center', padding: '20px 0px 20px 0px' }} onSubmit={()=> updateSomething(textUpdate._id)}>\n        <TextField type=\"text\" onChange={handleOnchangeUpdate} placeholder=\"what do you want to do?\" name=\"todo\" value={input.todo} />\n        <Button onClick={()=> updateSomething(textUpdate._id)} variant=\"contained\">update</Button>\n      </form>)}\n      <br />\n        <DataGrid\n          style={{marginLeft: \"20px\", marginRight: \"20px\"}}\n          rows={rows}\n          getRowId={(row) => row._id}\n          columns={columns}\n          pageSize={5}\n          rowsPerPageOptions={[5]}\n          // checkboxSelection\n          disableSelectionOnClick\n          onSelectionModelChange={(newSelectionModel) => {\n            setSelectionModel(newSelectionModel);\n          }}\n          selectionModel={selectionModel}\n          cell--textCenter\n        />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}